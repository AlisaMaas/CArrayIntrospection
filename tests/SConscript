########################################################################
#
#  common imports and setup for all tests
#

Import('env')
env.AppendUnique(CLANG_FLAGS='-Werror')


def RunTest(self, source, **kwargs):
    source = File(source)
    actual = source.target_from_source('actualsAndExpecteds/', '.actual')
    bitcode = self.BitcodeSource(source)

    if self['IIGLUE']:
        json = source.target_from_source('json/', '.json')
        self.IIGlueAnalyze(json, bitcode)
        pluginSources = (json, bitcode)
    else:
        pluginSources = bitcode

    self.RunPlugin(actual, pluginSources, **kwargs)
    passed = self.Expect(actual)
    Alias('test', passed)

env.AddMethod(RunTest)


def RunTests(self, **kwargs):
    for source in Glob('*.c'):
        self.RunTest(source, **kwargs)

env.AddMethod(RunTests)


########################################################################
#
#  IIGlueReader tests
#

# tenv = env.Clone(PLUGIN_ARGS='-iiglue-reader')
# tenv.RunTest('iiglue-reader-variadic.c')
# tenv.RunTest('iiglue-reader-multiple.c', json=('json/iiglue-reader-peek.json', 'json/iiglue-reader-variadic.json'))

# if env['IIGLUE']:
#     tenv.RunTest('iiglue-reader-peek.c')


########################################################################
#
#  subdirectories
#

SConscript(
    dirs=[
        'structTests',
        'argumentSentinelCheckTests',
        'lengthTests',
        'generic',
        'symbolicRangeTests',
        'noPointerArithmeticTests',
    ],
    exports='env',
)
