########################################################################
#
#  common imports and setup for all tests
#

Import('env')
env.AppendUnique(CLANG_FLAGS='-Werror')


def RunTest(self, source, pluginArgs, **kwargs):
    source = File(source)
    actual = source.target_from_source('actualsAndExpecteds/', '.actual')
    bitcode = self.BitcodeSource(source)

    if self['IIGLUE']:
        json = source.target_from_source('json/', '.json')
        self.IIGlueAnalyze(json, bitcode)
        pluginSources = (json, bitcode)
    else:
        pluginSources = bitcode

    self.RunPlugin(actual, pluginSources, PLUGIN_ARGS=pluginArgs, **kwargs)
    passed = self.Expect(actual)
    Alias('test', passed)

env.AddMethod(RunTest)


def RunTests(self, *pluginArgs):
    for source in Glob('*.c'):
        self.RunTest(source, pluginArgs)

env.AddMethod(RunTests)


########################################################################
#
#  IIGlueReader tests
#

# tenv = env.Clone(PLUGIN_ARGS='-iiglue-reader')
# tenv.RunTest('iiglue-reader-variadic.c')
# tenv.RunTest('iiglue-reader-multiple.c', json=('json/iiglue-reader-peek.json', 'json/iiglue-reader-variadic.json'))

# if env['IIGLUE']:
#     tenv.RunTest('iiglue-reader-peek.c')


########################################################################
#
#  subdirectories
#


# Local variables:
# flycheck-flake8rc: "../scons-flake8.ini"
# End:
SConscript(dirs=['structTests', 'argumentSentinelCheckTests', 'lengthTests', 'generic'], exports='env')
# SConscript(dirs=['sentinelCheckTests', 'lengthTests'], exports='env')
